module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "eslint:recommended",
    "airbnb",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
  ],
  parserOptions: {
    ecmaVersion: "latest",
    sourceType: "module",
  },
  plugins: ["react"],
  rules: {
    quotes: ["error", "single"],
    "linebreak-style": ["error", "lf"],
    "react/jsx-filename-extension": [
      1,
      { extensions: [".js", ".jsx", ".ts", ".tsx"] },
    ],
    "react/forbid-prop-types": "off",
    "react/require-default-props": "off",
    "import/no-named-as-default": "off",
    "import/no-named-as-default-member": "off",
    "import/extensions": "off",
    "import/no-unresolved": "off",
    "global-require": "off",
    "no-underscore-dangle": "off",
    "no-tabs": "off",
    indent: ["error", 4],
    "object-curly-newline": [
      "error",
      {
        ObjectExpression: { multiline: true, minProperties: 4 },
        ObjectPattern: { multiline: true, minProperties: 4 },
        ImportDeclaration: "never",
        ExportDeclaration: { multiline: true, minProperties: 4 },
      },
    ],
    "react/jsx-indent": ["error", 4],
    "react/jsx-indent-props": ["error", 4],
    "react/function-component-definition": "off",
    "react/prop-types": "off",
    "no-use-before-define": "off",
    "max-len": [
      "error",
      {
        code: 200,
        ignoreComments: true,
        ignoreUrls: true,
        ignoreTemplateLiterals: true,
      },
    ],
    "class-methods-use-this": ["error", { enforceForClassFields: false }],
    "react-hooks/exhaustive-deps": "off",
    "react/react-in-jsx-scope": "off",
  },
  overrides: [
    {
      files: ["**/*.ts", "**/*.tsx"],
      parser: "@typescript-eslint/parser",
      extends: [
        "eslint:recommended",
        "airbnb",
        "airbnb/hooks",
        "airbnb-typescript",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
      ],
      parserOptions: { project: "./tsconfig.json" },
      plugins: ["react", "@typescript-eslint"],
      rules: {
        "react/jsx-props-no-spreading": "off",
        indent: "off",
        "react/jsx-indent": ["error", 4],
        "react/jsx-indent-props": ["error", 4],
        "@typescript-eslint/indent": ["error", 4],
        "max-len": [
          "warn",
          {
            code: 200,
            ignoreComments: true,
            ignoreUrls: true,
            ignoreTemplateLiterals: true,
          },
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            selector: ["enumMember", "typeLike"],
            format: ["PascalCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: ["method", "variableLike", "classProperty"],
            format: ["camelCase", "UPPER_CASE", "PascalCase"],
            leadingUnderscore: "allow",
          },
          {
            selector: ["property", "classProperty"],
            format: ["UPPER_CASE", "PascalCase"],
            modifiers: ["static", "public"],
          },
          {
            selector: ["property", "classProperty"],
            format: ["UPPER_CASE", "PascalCase"],
            modifiers: ["public", "readonly"],
          },
          {
            selector: ["property"],
            format: ["camelCase"],
            modifiers: ["static", "private"],
          },
          {
            selector: "variable",
            modifiers: ["const", "global"],
            format: ["UPPER_CASE", "camelCase", "PascalCase"],
          },
          {
            selector: ["variable"],
            modifiers: ["const", "global", "exported"],
            types: ["function"],
            format: ["PascalCase", "camelCase"],
          },
        ],
        "import/extensions": "off",
        "no-underscore-dangle": "off",
        "react-hooks/exhaustive-deps": "off",
        "react/function-component-definition": "off",
        "react/prop-types": ["error", { ignore: ["navigation", "route"] }],
        "object-curly-newline": [
          "error",
          {
            ObjectExpression: { multiline: true, minProperties: 4 },
            ObjectPattern: { multiline: true, minProperties: 4 },
            ImportDeclaration: "never",
            ExportDeclaration: { multiline: true, minProperties: 4 },
          },
        ],
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/lines-between-class-members": "off",
        "@typescript-eslint/no-namespace": [
          "error",
          { allowDeclarations: true },
        ],
        "@typescript-eslint/no-unsafe-assignment": "off",
        "padding-line-between-statements": [
          "warn",
          { blankLine: "always", prev: "*", next: "block" },
          { blankLine: "always", prev: "block", next: "*" },
          { blankLine: "always", prev: "*", next: "block-like" },
          { blankLine: "always", prev: "block-like", next: "*" },
          { blankLine: "always", prev: "*", next: "return" },
          { blankLine: "any", prev: "const", next: "if" },
          { blankLine: "any", prev: "let", next: "if" },
        ],
        "react/react-in-jsx-scope": "off",
      },
    },
  ],
};
